{"ast":null,"code":"import axios from 'axios';\nimport { CREATE_ORDER_REQUEST, CREATE_ORDER_SUCCESS, CREATE_ORDER_FAIL, MY_ORDERS_REQUEST, MY_ORDERS_SUCCESS, MY_ORDERS_FAIL, ALL_ORDERS_REQUEST, ALL_ORDERS_SUCCESS, ALL_ORDERS_FAIL, UPDATE_ORDER_REQUEST, UPDATE_ORDER_SUCCESS, UPDATE_ORDER_FAIL, DELETE_ORDER_REQUEST, DELETE_ORDER_SUCCESS, DELETE_ORDER_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, CLEAR_ERRORS } from '../constants/orderConstants'; // Create Order\n\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_ORDER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/order/new', order, config);\n    dispatch({\n      type: CREATE_ORDER_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: CREATE_ORDER_FAIL,\n      payload: err.response.data.errorMessage\n    });\n  }\n}; // Currently logged in users orders\n\nexport const myOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: MY_ORDERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/orders/me');\n    dispatch({\n      type: MY_ORDERS_SUCCESS,\n      payload: data.orders\n    });\n  } catch (err) {\n    dispatch({\n      type: MY_ORDERS_FAIL,\n      payload: err.response.data.errorMessage\n    });\n  }\n}; // Single Order Details\n\nexport const getOrderDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/order/${id}`);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data.order\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // All orders\n\nexport const allOrders = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_ORDERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/admin/orders`);\n    dispatch({\n      type: ALL_ORDERS_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: ALL_ORDERS_FAIL,\n      payload: err.response.data.errorMessage\n    });\n  }\n}; // Update Order\n\nexport const updateOrder = (id, orderData) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_ORDER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/admin/order/${id}`, orderData, config);\n    dispatch({\n      type: UPDATE_ORDER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Delete order\n\nexport const deleteOrder = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_ORDER_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/v1/admin/order/${id}`);\n    dispatch({\n      type: DELETE_ORDER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/Satish/Desktop/web_design/E-Shop/Final Project/INFO6150-20821-Web-Design-User-Experience_final_project/final_project/client/src/actions/orderActions.js"],"names":["axios","CREATE_ORDER_REQUEST","CREATE_ORDER_SUCCESS","CREATE_ORDER_FAIL","MY_ORDERS_REQUEST","MY_ORDERS_SUCCESS","MY_ORDERS_FAIL","ALL_ORDERS_REQUEST","ALL_ORDERS_SUCCESS","ALL_ORDERS_FAIL","UPDATE_ORDER_REQUEST","UPDATE_ORDER_SUCCESS","UPDATE_ORDER_FAIL","DELETE_ORDER_REQUEST","DELETE_ORDER_SUCCESS","DELETE_ORDER_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","CLEAR_ERRORS","createOrder","order","dispatch","getState","type","config","headers","data","post","payload","err","response","errorMessage","myOrders","get","orders","getOrderDetails","id","error","message","allOrders","updateOrder","orderData","put","success","deleteOrder","delete","clearErrors"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nimport {\n  CREATE_ORDER_REQUEST,\n  CREATE_ORDER_SUCCESS,\n  CREATE_ORDER_FAIL,\n  MY_ORDERS_REQUEST,\n  MY_ORDERS_SUCCESS,\n  MY_ORDERS_FAIL,\n  ALL_ORDERS_REQUEST,\n  ALL_ORDERS_SUCCESS,\n  ALL_ORDERS_FAIL,\n  UPDATE_ORDER_REQUEST,\n  UPDATE_ORDER_SUCCESS,\n  UPDATE_ORDER_FAIL,\n  DELETE_ORDER_REQUEST,\n  DELETE_ORDER_SUCCESS,\n  DELETE_ORDER_FAIL,\n  ORDER_DETAILS_REQUEST,\n  ORDER_DETAILS_SUCCESS,\n  ORDER_DETAILS_FAIL,\n  CLEAR_ERRORS\n} from '../constants/orderConstants'\n\n\n// Create Order\nexport const createOrder = (order) => async (dispatch, getState) => {\n  try {\n\n    dispatch({ type: CREATE_ORDER_REQUEST })\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    const { data } = await axios.post('/api/v1/order/new', order, config);\n\n    dispatch({\n      type: CREATE_ORDER_SUCCESS,\n      payload: data\n    })\n\n  } catch (err) {\n    dispatch({\n      type: CREATE_ORDER_FAIL,\n      payload: err.response.data.errorMessage\n    })\n  }\n}\n\n// Currently logged in users orders\nexport const myOrders = () => async (dispatch, getState) => {\n  try {\n    \n    dispatch({ type: MY_ORDERS_REQUEST });\n\n    const { data } = await axios.get('/api/v1/orders/me');\n\n    dispatch({\n      type: MY_ORDERS_SUCCESS,\n      payload: data.orders\n    })\n\n  } catch(err) {\n    dispatch({\n      type: MY_ORDERS_FAIL,\n      payload: err.response.data.errorMessage\n    });\n  }\n}\n\n// Single Order Details\nexport const getOrderDetails = (id) => async (dispatch) => {\n  try {\n\n    dispatch({ type: ORDER_DETAILS_REQUEST });\n\n    const { data } = await axios.get(`/api/v1/order/${id}`)\n\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data.order\n    });\n\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}\n\n// All orders\nexport const allOrders = () => async (dispatch) => {\n  try {\n    \n    dispatch({ type: ALL_ORDERS_REQUEST });\n\n    const { data } = await axios.get(`/api/v1/admin/orders`);\n\n    dispatch({\n      type: ALL_ORDERS_SUCCESS,\n      payload: data\n    })\n\n  } catch(err) {\n    dispatch({\n      type: ALL_ORDERS_FAIL,\n      payload: err.response.data.errorMessage\n    })\n  }\n}\n\n// Update Order\nexport const updateOrder = (id, orderData) => async (dispatch) => {\n  try {\n\n    dispatch({ type: UPDATE_ORDER_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    const { data } = await axios.put(`/api/v1/admin/order/${id}`, orderData, config)\n\n    dispatch({\n      type: UPDATE_ORDER_SUCCESS,\n      payload: data.success\n    });\n\n  } catch (error) {\n    dispatch({\n      type: UPDATE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}\n\n// Delete order\nexport const deleteOrder = (id) => async (dispatch) => {\n  try {\n\n    dispatch({ type: DELETE_ORDER_REQUEST })\n\n    const { data } = await axios.delete(`/api/v1/admin/order/${id}`)\n\n    dispatch({\n       type: DELETE_ORDER_SUCCESS,\n      payload: data.success\n    });\n\n  } catch (error) {\n    dispatch({\n        type: DELETE_ORDER_FAIL,\n        payload: error.response.data.message\n    });\n  }\n}\n\n// Clear Errors\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n}"]},"metadata":{},"sourceType":"module"}